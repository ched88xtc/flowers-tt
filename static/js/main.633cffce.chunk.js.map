{"version":3,"sources":["components/Flower/Flower.jsx","components/FlowerList/FlowersList.jsx","components/FlowerForm/FlowersForm.jsx","App.js","store/flowersReduser.js","store/store.js","index.js"],"names":["Flower","id","name","price","checked","dispatch","useDispatch","className","onClick","type","payload","changeStatus","FlowersList","flowers","useSelector","state","useEffect","document","title","map","flower","FlowersForm","useState","newFlowerName","setFlowerName","newFlowerPrice","setFlowerPrice","hasNameErr","setNameErr","hasPriceErr","setPriceErr","hasPriceTypeErr","setPriceTypeErr","hasNameTypeErr","setNameTypeErr","onSubmit","event","preventDefault","match","flowerName","flowerPrice","newFlower","Math","random","addFlower","toUpperCase","slice","placeholder","autoComplete","value","onChange","target","App","exact","path","to","defaultState","store","createStore","action","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.633cffce.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Flower.css'\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport function Flower({ id, name, price, checked }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const changeStatus = (id) => {\r\n    dispatch({type:\"CHANGE_STATUS\", payload: id})\r\n  }\r\n\r\n  return (\r\n    <div className=\"flowerCard\">\r\n      <span\r\n        className={\r\n          checked\r\n            ? \"flowerChecked flowerName\"\r\n            : \"flowerToCheck flowerName\"\r\n        }\r\n      >\r\n        {name}\r\n      </span>\r\n      <span\r\n        className={\r\n          checked\r\n            ? \"flowerChecked flowerPrice\"\r\n            : \"flowerToCheck flowerPrice\"\r\n        }\r\n      >\r\n        {`$${price}`}\r\n      </span>\r\n      {!checked && <button onClick={() => changeStatus(id)} className=\"checkFlowerBtn\">Check</button>}\r\n    </div>\r\n  )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {Flower} from \"../Flower/Flower\";\r\nimport './FlowersList.css';\r\nimport {useSelector} from \"react-redux\";\r\n\r\nexport function FlowersList() {\r\n  const flowers = useSelector(state => state.flowers)\r\n\r\n  useEffect(() => {\r\n    document.title = 'List';\r\n  },[])\r\n\r\n  return (\r\n    <div className=\"flowersListWrapper\">\r\n      <span className=\"flowersListTitle\">Added flowers:</span>\r\n      <ul className=\"flowersList\">\r\n        {flowers.map(flower => (\r\n          <li\r\n            className={\r\n              !flower.checked\r\n                ? \"flowersCheckedElement flowersElement\"\r\n                : \"flowersUncheckedElement flowersElement\"\r\n            }\r\n            key={flower.id}\r\n          >\r\n            <Flower {...flower} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport './FlowersForm.css';\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport function FlowersForm() {\r\n  const [newFlowerName, setFlowerName] = useState('');\r\n  const [newFlowerPrice, setFlowerPrice] = useState('');\r\n  const [hasNameErr, setNameErr] = useState(false);\r\n  const [hasPriceErr, setPriceErr] = useState(false);\r\n  const [hasPriceTypeErr, setPriceTypeErr] = useState(false);\r\n  const [hasNameTypeErr, setNameTypeErr] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    document.title = 'Form';\r\n  },[])\r\n\r\n  const addFlower = (flowerName, flowerPrice) => {\r\n    const newFlower = {\r\n      id: Math.random(),\r\n      name: flowerName,\r\n      price: +flowerPrice,\r\n      checked: false,\r\n    }\r\n\r\n    dispatch({type:\"ADD_FLOWER\", payload: newFlower})\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    setNameErr(!newFlowerName);\r\n    setPriceErr(!newFlowerPrice);\r\n    setNameTypeErr(false)\r\n    setPriceTypeErr(false);\r\n\r\n    if (!newFlowerName) {\r\n      return;\r\n    }\r\n\r\n    if (!newFlowerPrice) {\r\n      return;\r\n    }\r\n\r\n    if (!newFlowerName.match(/^[a-zA-Z]+(-[a-zA-Z]+)*$/)) {\r\n      setNameTypeErr(true);\r\n      return;\r\n    }\r\n\r\n    if (!newFlowerPrice.match(/^[0-9]+$/)) {\r\n      setPriceTypeErr(true);\r\n      return;\r\n    }\r\n\r\n    const changedNewFlowerName = newFlowerName[0].toUpperCase() + newFlowerName.slice(1);\r\n\r\n    addFlower(changedNewFlowerName, newFlowerPrice);\r\n    setFlowerName('');\r\n    setFlowerPrice('');\r\n  }\r\n\r\n  return (\r\n    <form className=\"flowersForm\" onSubmit={handleSubmit}>\r\n      <div className=\"flowersInputWrapper\">\r\n        {hasNameErr && (\r\n          <span className=\"inputErr\">\r\n              *Name is required field\r\n            </span>\r\n        )}\r\n        {hasNameTypeErr && (\r\n          <span className=\"inputErr\">\r\n              *Name should include letters only\r\n            </span>\r\n        )}\r\n        <input\r\n          className=\"flowersInput\"\r\n          type=\"text\"\r\n          placeholder=\"What is flower name?\"\r\n          autoComplete=\"off\"\r\n          value={newFlowerName}\r\n          onChange={(event => {\r\n            setFlowerName(event.target.value)\r\n            setNameErr(false)\r\n            setNameTypeErr(false)\r\n          })}\r\n        />\r\n      </div>\r\n      <div className=\"flowersInputWrapper\">\r\n        {hasPriceErr && (\r\n          <span className=\"inputErr\">\r\n              *Price is required field\r\n            </span>\r\n        )}\r\n        {hasPriceTypeErr && (\r\n          <span className=\"inputErr\">\r\n              *Price should include numbers only\r\n            </span>\r\n        )}\r\n        <input\r\n          className=\"flowersInput\"\r\n          type=\"text\"\r\n          placeholder=\"What is flower price?\"\r\n          autoComplete=\"off\"\r\n          value={newFlowerPrice}\r\n          onChange={(event => {\r\n            setFlowerPrice(event.target.value)\r\n            setPriceErr(false)\r\n            setPriceTypeErr(false)\r\n          })}\r\n        />\r\n      </div>\r\n      <button type=\"submit\" className=\"addFlowerBtn\">Add flower to the list</button>\r\n    </form>\r\n  )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Route, Link, } from \"react-router-dom\";\nimport {FlowersList} from \"./components/FlowerList/FlowersList\";\nimport {FlowersForm} from \"./components/FlowerForm/FlowersForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route exact path=\"/\">\n        <FlowersForm />\n        <div className=\"flowersListLinkWrapper\">\n          <Link to=\"/list\">List</Link>\n        </div>\n      </Route>\n      <Route path=\"/list\">\n        <div className=\"flowersFormLinkWrapper\">\n          <Link to=\"/\">Back to form</Link>\n        </div>\n        <FlowersList />\n      </Route>\n    </div>\n  );\n}\n\nexport default App;\n","const defaultState = {\r\n  flowers: [\r\n    {\r\n      id: 3,\r\n      name: \"Rose\",\r\n      price: 30,\r\n      checked: false,\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Peony\",\r\n      price: 15,\r\n      checked: true,\r\n    },\r\n    {\r\n      id: 1,\r\n      name: \"Lily\",\r\n      price: 20,\r\n      checked: false,\r\n    }\r\n  ]\r\n}\r\n\r\nexport const flowersReducer = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_FLOWER\":\r\n      return {...state, flowers: [...state.flowers, action.payload]}\r\n    case \"CHANGE_STATUS\":\r\n      return {...state, flowers: state.flowers.map(flower => {\r\n          if (flower.id === action.payload) {\r\n            return {...flower, checked: !flower.checked}\r\n          }\r\n          return flower;\r\n        })}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {createStore} from \"redux\";\r\nimport {flowersReducer} from \"./flowersReduser\";\r\n\r\n\r\nexport const store = createStore(flowersReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { HashRouter } from \"react-router-dom\";\n\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n        <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}